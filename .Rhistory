Sig_array <- FDR_array$GeneName[FDR_array$adj.P.Val<0.05]
Sig_seq <- FDR_seq$geneNames[FDR_seq$FDR<0.05]
nrow(FDR_seq) #19470
nrow(FDR_array) #23569
length(Region_P) #1481
length(Region_FDR) #60
length(Sig_array) #318
length(Sig_seq) #244
length(intersect(Region_P,Sig_array)) #38
length(intersect(Region_P,Sig_seq)) #20
length(intersect(Region_FDR,Sig_array)) #0
length(intersect(Region_FDR,Sig_seq))#0
## load required packages ##################
library(limma)
library(ruv)
library(EDASeq)
## micro-array data #######################
load("../Data/useExp.rda")
load("../Data/infoExp.rda")
regionOrder <- c(1,2,5,7,9,11,3,4,6,8,10,12)
Samples_Array <-  c("C55F","C1078F","C1078T","C1541T","C1571F","C1571T","R1815F","R1815T","R4516F","R4516T","R4852F","R4852T")
Samples_array <- c("C1-F", "C2-F", "C2-T", "C3-T", "C4-F", "C4-T", "R1-F", "R1-T", "R2-F", "R2-T", "R3-F", "R3-T")
group_array <- c(rep("control", 6), rep("Rett", 6))
Samples_Array <- Samples_Array[regionOrder]
Samples_array <- Samples_array[regionOrder]
useExp <- useExp[,regionOrder]
regions <- c(rep("F",6),rep("T",6))
## Array Neuron Levels Plot ###########################
load("../Data/Astro_array.rda")
regionAstro <- Astro_array[1,-1]
regionAstro <- regionAstro[regionOrder]
barplot(height=1-as.numeric(regionAstro),
names.arg=Samples_array,
ylab = "Proportion of neurons",
ylim=c(0.48,0.52), col=c(rep("blue", 6), rep("red", 6)),
xpd=FALSE)
abline(h=0.5, col="grey")
plotPCA(as.matrix(useExp),isLog=TRUE)
## RUV2 normalisation with k=2 ##########################
fit <- eBayes(lmFit(useExp, model.matrix(~regions)))
fp_array <- topTable(fit, coef=2, number=Inf)
fp_array <- cbind(infoExp[rownames(fp_array),], fp_array[,c(1,2,4,5)])
ctl <- !infoExp$GeneName%in%fp_array$GeneName[1:5000]
RUVnArray <- RUV2(Y=t(useExp), X=t(t(c(rep(0,6), rep(1,6)))), ctl=ctl, k=2)
W <- RUVnArray$W
R <- removeBatchEffect(useExp,covariates=W,design=model.matrix(~regions))
plotPCA(as.matrix(R),isLog=TRUE)
R<-cbind(infoExp,R)
## Frontal vs Temporal #################
design_array <- model.matrix(~W+regions)
fit <- eBayes(lmFit(useExp, design_array))
FDR_array <- topTable(fit, coef=4, number=Inf)
FDR_array <- cbind(infoExp[rownames(FDR_array),], FDR_array[,c(1,2,4,5)])
rownames(FDR_array) <- 1:nrow(FDR_array)
## Frontal vs Temporal - Control ##########################
useExpC <- useExp[,c(1,2,3,7,8,9)]
groupC <- c(rep("F", 3), rep("T", 3))
plotPCA(as.matrix(useExpC),isLog=TRUE)
fit <- eBayes(lmFit(useExpC, model.matrix(~groupC)))
fp_array <- topTable(fit, coef=2, number=Inf)
fp_array <- cbind(infoExp[rownames(fp_array),], fp_array[,c(1,2,4,5)])
ctlC <- !infoExp$GeneName%in%fp_array$GeneName[1:5000]
RUVnArray <- RUV2(Y=t(useExpC), X=t(t(c(rep(0,3), rep(1,3)))), ctl=ctlC, k=2)
WC <- RUVnArray$W
RC <- removeBatchEffect(useExpC,covariates=WC,design=model.matrix(~groupC))
plotPCA(as.matrix(RC),isLog=TRUE)
RC<-cbind(infoExp,RC)
design_array <- model.matrix(~WC+groupC)
fit <- eBayes(lmFit(useExpC, design_array))
FDR_C <- topTable(fit, coef=4, number=Inf)
FDR_C <- cbind(infoExp[rownames(FDR_C),], FDR_C[,c(1,2,4,5)])
rownames(FDR_C) <- 1:nrow(FDR_C)
head(FDR_C)
nrow(FDR_C[FDR_C$adj.P.Val<0.05,])
head(FDR_array)
## Load required packages ##########################################
library(edgeR)
library(RUVSeq)
library(EDASeq)
## Load inputs/data #############################################
load("../Results/geneCounts.rda")
load("../Data/Astro_seq.rda")
load("../Annot/geneInfo.rda")
## Two versions of sample naming ###################################
Samples_Seq <- c("C1078", "C1541", "C1571", "R1815", "R4516", "R4852")
Samples_seq <- c("C2", "C3", "C4", "R1", "R2", "R3")
## Normalisation and Filtering ###########################################
geneRPKM <- rpkm(x = geneCounts$counts, gene.length = geneCounts$annotation$Length)
geneCPM <- cpm(geneCounts$counts)
threshold = 0.5; nSamples = 3
filtered <- which(rowSums(geneRPKM > threshold) >= nSamples)
counts <- geneCounts$counts[filtered,]
RPKM <- geneRPKM[filtered,]
CPM <- geneCPM[filtered,]
colnames(counts) <- Samples_seq
colnames(RPKM) <- Samples_seq
colnames(CPM) <- Samples_seq
## PC plots ###################################################################
group_seq <- c("control", "control", "control", "Rett", "Rett", "Rett")
input <- DGEList(counts=counts, group=group_seq)
input <- calcNormFactors(input)
plotMDS(input, col=c(rep("blue",3),rep("red",3)),
xlab="PC1", ylab="PC2", main="TMM Normalisation")
## plotPCA(counts)
## first past differential expression analysis ####################################
input <- estimateCommonDisp(input, verbose=TRUE)
input <- estimateTagwiseDisp(input)
plotBCV(input)
et <- exactTest(input)
firstPass <- topTags(et,n=Inf)
controlGenes <- rownames(firstPass)[-c(1:5000)]
## RUV ##########################################################################
RUV1 <- RUVg(counts, controlGenes, k=1)
N <- RUV1$normalizedCounts
plotMDS(DGEList(RUV1$normalizedCounts), col=c(rep("blue",3),rep("red",3)),
xlab="PC1", ylab="PC2", main="RUVg (k=1)")
RUV2 <- RUVg(counts, controlGenes, k=2)
plotMDS(DGEList(RUV2$normalizedCounts), col=c(rep("blue",3),rep("red",3)),
xlab="PC1", ylab="PC2", main="RUVg (k=2)")
## plotPCA(N)
## save(N, file="../Results/N.rda")
## Regions
## Differential expression analysis #############################################
design <- model.matrix(~RUV1$W+group_seq)
input <- DGEList(counts=counts, group=group_seq)
input <- calcNormFactors(input, method="none")
input <- estimateGLMCommonDisp(input, design, verbose=TRUE)
input <- estimateGLMTrendedDisp(input, design)
input <- estimateGLMTagwiseDisp(input, design)
plotBCV(input)
fit <- glmFit(input, design)
et <- glmLRT(fit)
FDR_seq <- data.frame(topTags(et, n=Inf))
FDR_seq <- cbind(rownames(FDR_seq), FDR_seq)
colnames(FDR_seq)[1] <- "genes"
rownames(FDR_seq) <- 1:nrow(FDR_seq)
## Adding Gene Names and Normalised counts ########################################
FDR_seq <- cbind(FDR_seq[,1],
geneInfo$gene_name[match(FDR_seq$genes, geneInfo$gene_id)],
FDR_seq[,-1])
colnames(FDR_seq)[1:2]<-c("geneID","geneNames")
FDR_seq <- cbind(FDR_seq, N[match(FDR_seq$geneID,rownames(N)),])
## save(FDR_seq, file="../Results/FDR_seq.rda")
nrow(FDR_seq[FDR_seq$FDR<0.05,]) #244 DE genes with FDR<0.05
## load required packages ##################
library(limma)
library(ruv)
library(EDASeq)
## micro-array data #######################
load("../Data/useExp.rda")
load("../Data/infoExp.rda")
Samples_Array <-  c("C55F","C1078F","C1078T","C1541T","C1571F","C1571T","R1815F","R1815T","R4516F","R4516T","R4852F","R4852T")
Samples_array <- c("C1-F", "C2-F", "C2-T", "C3-T", "C4-F", "C4-T", "R1-F", "R1-T", "R2-F", "R2-T", "R3-F", "R3-T")
group_array <- c(rep("control", 6), rep("Rett", 6))
regions <-c("F","F","T","T","F","T","F","T","F","T","F","T")
## PC Plot ###########################
plotMDS(useExp,col=c(rep("blue",6),rep("red",6)),
xlab="PC1",ylab="PC2")
## plotPCA(as.matrix(useExp),isLog=TRUE)
## RUV2 normalisation with k=2 ##########################
fit <- eBayes(lmFit(useExp, model.matrix(~group_array)))
fp_array <- topTable(fit, coef=2, number=Inf)
fp_array <- cbind(infoExp[rownames(fp_array),], fp_array[,c(1,2,4,5)])
ctl <- !infoExp$GeneName%in%fp_array$GeneName[1:5000]
RUVnArray <- RUV2(Y=t(useExp), X=t(t(c(rep(0,6), rep(1,6)))), ctl=ctl, k=2)
W <- RUVnArray$W
I <- lmFit(useExp, design=model.matrix(~W))$coefficients[,1]
C <- lmFit(useExp, design=model.matrix(~W))$coefficients[,-1]
R2 <- useExp - as.matrix(C)%*%as.matrix(t(W)) - I
plotMDS(R2, col=c(rep("BLUE",6),rep("RED",6)),
xlab="PC1", ylab="PC2",xlim=c(-0.6,1), ylim=c(-0.6,0.5),
main="RUV-2 (k=2)",dim.plot=c(1,2))
R <- removeBatchEffect(useExp,covariates=W,design=model.matrix(~group_array))
## plotMDS(R,col=c(rep("blue",6),rep("red",6)))
## plotPCA(as.matrix(R),isLog=TRUE)
R<-cbind(infoExp,R)
## save(R, file="../Results/R.rda")
## Differential expression analysis #################
design_array <- model.matrix(~W+group_array)
fit <- eBayes(lmFit(useExp, design_array))
FDR_array <- topTable(fit, coef=4, number=Inf)
FDR_array <- cbind(infoExp[rownames(FDR_array),], FDR_array[,c(1,2,4,5)])
rownames(FDR_array) <- 1:nrow(FDR_array)
## Add normalised expression #############
FDR_array <- cbind(FDR_array,R[match(FDR_array$GeneName,R$GeneName),-c(1:5)])
## save(FDR_array, file="../Results/FDR_array.rda")
## MECP2 Expression ######################
## Raw Expression Level
MECP2<-useExp[infoExp$GeneName=="MECP2",]
barplot(height=as.numeric(MECP2),
names.arg=Samples_array,
main="MECP2 Expression Level",
ylab = "Expression Level",
col=c(rep("blue", 6), rep("red", 6)),
ylim=c(6.5,7.8),
xpd=FALSE)
## RUV normalised
MECP2 <- FDR_array[FDR_array$GeneName=="MECP2",]
## pdf(file="../Results/MECP2_array.pdf")
barplot(height=as.numeric(MECP2[-c(1:9)]),
names.arg=Samples_array,
main="MECP2 Expression Level",
ylab = "Normalised Expression Level",
col=c(rep("blue", 6), rep("red", 6)),
ylim=c(7,7.8),
xpd=FALSE)
## dev.off()
## Calculate validation rate - 74% #################
load("../Results/FDR_seq.rda")
FDR_seq<-FDR_seq[,1:7]
common <- cbind(FDR_seq[,-5],
FDR_array[match(FDR_seq$geneID, FDR_array$GeneID),-c(1,2)])
colnames(common) <- c("geneID", "geneName",
"logFC_seq","logCPM_seq", "pValue_seq", "FDR_seq",
"TxID","probeID", "addressID",
"logFC_array", "aveExpr_array","pValue_array", "FDR_array")
common <- common[!is.na(common$probeID),]
rownames(common) <- 1:nrow(common)
DE_seq <- common[common$FDR_seq<0.05,]
validationFDR <- p.adjust(DE_seq$pValue_array,method="BH")
DE_seq <- cbind(DE_seq,validationFDR)
DE_seq_validated <- DE_seq[DE_seq$validationFDR<0.05 & DE_seq$logFC_seq*DE_seq$logFC_array>0, ]
nrow(DE_seq_validated);nrow(DE_seq);nrow(DE_seq_validated)/nrow(DE_seq)
## Regional Differences ##########
regions <- c("F","F","T","T","F","T","F","T","F","T","F","T")
## before RUV
fit_region <- eBayes(lmFit(useExp, model.matrix(~group_array+regions)))
FDR_region <- topTable(fit_region, coef=3, number=Inf)
FDR_region <- cbind(infoExp[rownames(FDR_region),], FDR_region[,c(1,2,4,5)])
## after RUV
design_region <- model.matrix(~W+group_array+regions)
fit_region <- eBayes(lmFit(useExp, design_region))
FDR_region <- topTable(fit_region, coef=5, number=Inf)
FDR_region <- cbind(infoExp[rownames(FDR_region),], FDR_region[,c(1,2,4,5)])
rownames(FDR_region) <- 1:nrow(FDR_region)
## Regional Differences - Rett Only ##########
regions <- c("F","T","F","T","F","T")
## before RUV
fit_region_bRUV <- eBayes(lmFit(useExp[,7:12], model.matrix(~regions)))
FDR_region_bRUV <- topTable(fit_region_bRUV, coef=2, number=Inf)
FDR_region_bRUV <- cbind(infoExp[rownames(FDR_region_bRUV),], FDR_region_bRUV[,c(1,2,4,5)])
## after RUV
design_region <- model.matrix(~W[7:12,]+regions)
fit_region <- eBayes(lmFit(useExp[,7:12], design_region))
FDR_region <- topTable(fit_region, coef=4, number=Inf)
FDR_region <- cbind(infoExp[rownames(FDR_region),], FDR_region[,c(1,2,4,5)])
rownames(FDR_region) <- 1:nrow(FDR_region)
## Regional Differences - Control Only ##########
regions <- c("F","F","T","T","F","T")
## before RUV
fit_region_bRUV <- eBayes(lmFit(useExp[,1:6], model.matrix(~regions)))
FDR_region_bRUV <- topTable(fit_region_bRUV, coef=2, number=Inf)
FDR_region_bRUV <- cbind(infoExp[rownames(FDR_region_bRUV),], FDR_region_bRUV[,c(1,2,4,5)])
## after RUV
design_region <- model.matrix(~W[1:6,]+regions)
fit_region <- eBayes(lmFit(useExp[,1:6], design_region))
FDR_region <- topTable(fit_region, coef=4, number=Inf)
FDR_region <- cbind(infoExp[rownames(FDR_region),], FDR_region[,c(1,2,4,5)])
rownames(FDR_region) <- 1:nrow(FDR_region)
## Region vs Rett/Control ##############
Region_P <- FDR_region$GeneName[FDR_region$P.Value<0.05]
Region_FDR <- FDR_region$GeneName[FDR_region$adj.P.Val<0.05]
Sig_array <- FDR_array$GeneName[FDR_array$adj.P.Val<0.05]
Sig_seq <- FDR_seq$geneNames[FDR_seq$FDR<0.05]
nrow(FDR_seq) #19470
nrow(FDR_array) #23569
length(Region_P) #1481
length(Region_FDR) #60
length(Sig_array) #318
length(Sig_seq) #244
length(intersect(Region_P,Sig_array)) #38
length(intersect(Region_P,Sig_seq)) #20
length(intersect(Region_FDR,Sig_array)) #0
length(intersect(Region_FDR,Sig_seq))#0
## Differential expression analysis - Frontal ##########################
useExpF <- useExp[,c(1,2,5,7,9,11)]
groupF <- c(rep("control", 3), rep("Rett", 3))
fit <- eBayes(lmFit(useExpF, model.matrix(~groupF)))
fp_array <- topTable(fit, coef=2, number=Inf)
fp_array <- cbind(infoExp[rownames(fp_array),], fp_array[,c(1,2,4,5)])
ctlF <- !infoExp$GeneName%in%fp_array$GeneName[1:5000]
RUVnArray <- RUV2(Y=t(useExpF), X=t(t(c(rep(0,3), rep(1,3)))), ctl=ctlF, k=2)
WF <- RUVnArray$W
RF <- removeBatchEffect(useExpF,covariates=WF,design=model.matrix(~groupF))
plotPCA(as.matrix(RF),isLog=TRUE)
RF<-cbind(infoExp,RF)
design_array <- model.matrix(~WF+groupF)
fit <- eBayes(lmFit(useExpF, design_array))
FDR_F <- topTable(fit, coef=4, number=Inf)
FDR_F <- cbind(infoExp[rownames(FDR_F),], FDR_F[,c(1,2,4,5)])
rownames(FDR_F) <- 1:nrow(FDR_F)
## Differential expression analysis - Temporal ##########################
useExpT <- useExp[,c(3,4,6,8,10,12)]
fit <- eBayes(lmFit(useExpT, model.matrix(~groupF)))
fp_array <- topTable(fit, coef=2, number=Inf)
fp_array <- cbind(infoExp[rownames(fp_array),], fp_array[,c(1,2,4,5)])
ctlT <- !infoExp$GeneName%in%fp_array$GeneName[1:5000]
RUVnArray <- RUV2(Y=t(useExpT), X=t(t(c(rep(0,3), rep(1,3)))), ctl=ctlT, k=2)
WT <- RUVnArray$W
RT <- removeBatchEffect(useExpT,covariates=WT,design=model.matrix(~groupF))
plotPCA(as.matrix(RT),isLog=TRUE)
RT<-cbind(infoExp,RT)
design_array <- model.matrix(~WT+groupF)
fit <- eBayes(lmFit(useExpT, design_array))
FDR_T <- topTable(fit, coef=4, number=Inf)
FDR_T <- cbind(infoExp[rownames(FDR_T),], FDR_T[,c(1,2,4,5)])
rownames(FDR_T) <- 1:nrow(FDR_T)
head(FDR_T)
head(FDR_F)
nrow(FDR_T[FDR_T$adj.P.Val<0.05,])
nrow(FDR_T[FDR_F$adj.P.Val<0.05,])
useExpF <- useExp[,c(1,2,5,7,9,11)]
groupF <- c(rep("control", 3), rep("Rett", 3))
fit <- eBayes(lmFit(useExpF, model.matrix(~groupF)))
fp_array <- topTable(fit, coef=2, number=Inf)
fp_array <- cbind(infoExp[rownames(fp_array),], fp_array[,c(1,2,4,5)])
ctlF <- !infoExp$GeneName%in%fp_array$GeneName[1:5000]
RUVnArray <- RUV2(Y=t(useExpF), X=t(t(c(rep(0,3), rep(1,3)))), ctl=ctlF, k=2)
WF <- RUVnArray$W
RF <- removeBatchEffect(useExpF,covariates=WF,design=model.matrix(~groupF))
plotPCA(as.matrix(RF),isLog=TRUE)
RF<-cbind(infoExp,RF)
design_array <- model.matrix(~WF+groupF)
fit <- eBayes(lmFit(useExpF, design_array))
FDR_F <- topTable(fit, coef=4, number=Inf)
FDR_F <- cbind(infoExp[rownames(FDR_F),], FDR_F[,c(1,2,4,5)])
rownames(FDR_F) <- 1:nrow(FDR_F)
FDR_F
FDR_F[1:30,]
useExpT <- useExp[,c(3,4,6,8,10,12)]
fit <- eBayes(lmFit(useExpT, model.matrix(~groupF)))
fp_array <- topTable(fit, coef=2, number=Inf)
fp_array <- cbind(infoExp[rownames(fp_array),], fp_array[,c(1,2,4,5)])
ctlT <- !infoExp$GeneName%in%fp_array$GeneName[1:5000]
RUVnArray <- RUV2(Y=t(useExpT), X=t(t(c(rep(0,3), rep(1,3)))), ctl=ctlT, k=2)
WT <- RUVnArray$W
RT <- removeBatchEffect(useExpT,covariates=WT,design=model.matrix(~groupF))
plotPCA(as.matrix(RT),isLog=TRUE)
RT<-cbind(infoExp,RT)
design_array <- model.matrix(~WT+groupF)
fit <- eBayes(lmFit(useExpT, design_array))
FDR_T <- topTable(fit, coef=4, number=Inf)
FDR_T <- cbind(infoExp[rownames(FDR_T),], FDR_T[,c(1,2,4,5)])
rownames(FDR_T) <- 1:nrow(FDR_T)
FDR_T[1:30,]
## load required packages ##################
library(limma)
library(ruv)
library(EDASeq)
## micro-array data #######################
load("../Data/useExp.rda")
load("../Data/infoExp.rda")
Samples_Array <-  c("C55F","C1078F","C1078T","C1541T","C1571F","C1571T","R1815F","R1815T","R4516F","R4516T","R4852F","R4852T")
Samples_array <- c("C1-F", "C2-F", "C2-T", "C3-T", "C4-F", "C4-T", "R1-F", "R1-T", "R2-F", "R2-T", "R3-F", "R3-T")
group_array <- c(rep("control", 6), rep("Rett", 6))
regions <-c("F","F","T","T","F","T","F","T","F","T","F","T")
## PC Plot ###########################
plotMDS(useExp,col=c(rep("blue",6),rep("red",6)),
xlab="PC1",ylab="PC2")
## plotPCA(as.matrix(useExp),isLog=TRUE)
## RUV2 normalisation with k=2 ##########################
fit <- eBayes(lmFit(useExp, model.matrix(~group_array)))
fp_array <- topTable(fit, coef=2, number=Inf)
fp_array <- cbind(infoExp[rownames(fp_array),], fp_array[,c(1,2,4,5)])
ctl <- !infoExp$GeneName%in%fp_array$GeneName[1:5000]
RUVnArray <- RUV2(Y=t(useExp), X=t(t(c(rep(0,6), rep(1,6)))), ctl=ctl, k=2)
W <- RUVnArray$W
I <- lmFit(useExp, design=model.matrix(~W))$coefficients[,1]
C <- lmFit(useExp, design=model.matrix(~W))$coefficients[,-1]
R2 <- useExp - as.matrix(C)%*%as.matrix(t(W)) - I
plotMDS(R2, col=c(rep("BLUE",6),rep("RED",6)),
xlab="PC1", ylab="PC2",xlim=c(-0.6,1), ylim=c(-0.6,0.5),
main="RUV-2 (k=2)",dim.plot=c(1,2))
R <- removeBatchEffect(useExp,covariates=W,design=model.matrix(~group_array))
## plotMDS(R,col=c(rep("blue",6),rep("red",6)))
## plotPCA(as.matrix(R),isLog=TRUE)
R<-cbind(infoExp,R)
## save(R, file="../Results/R.rda")
## Differential expression analysis #################
design_array <- model.matrix(~W+group_array)
fit <- eBayes(lmFit(useExp, design_array))
FDR_array <- topTable(fit, coef=4, number=Inf)
FDR_array <- cbind(infoExp[rownames(FDR_array),], FDR_array[,c(1,2,4,5)])
rownames(FDR_array) <- 1:nrow(FDR_array)
## Add normalised expression #############
FDR_array <- cbind(FDR_array,R[match(FDR_array$GeneName,R$GeneName),-c(1:5)])
## save(FDR_array, file="../Results/FDR_array.rda")
## MECP2 Expression ######################
## Raw Expression Level
MECP2<-useExp[infoExp$GeneName=="MECP2",]
barplot(height=as.numeric(MECP2),
names.arg=Samples_array,
main="MECP2 Expression Level",
ylab = "Expression Level",
col=c(rep("blue", 6), rep("red", 6)),
ylim=c(6.5,7.8),
xpd=FALSE)
## RUV normalised
MECP2 <- FDR_array[FDR_array$GeneName=="MECP2",]
## pdf(file="../Results/MECP2_array.pdf")
barplot(height=as.numeric(MECP2[-c(1:9)]),
names.arg=Samples_array,
main="MECP2 Expression Level",
ylab = "Normalised Expression Level",
col=c(rep("blue", 6), rep("red", 6)),
ylim=c(7,7.8),
xpd=FALSE)
## dev.off()
## Calculate validation rate - 74% #################
load("../Results/FDR_seq.rda")
FDR_seq<-FDR_seq[,1:7]
common <- cbind(FDR_seq[,-5],
FDR_array[match(FDR_seq$geneID, FDR_array$GeneID),-c(1,2)])
colnames(common) <- c("geneID", "geneName",
"logFC_seq","logCPM_seq", "pValue_seq", "FDR_seq",
"TxID","probeID", "addressID",
"logFC_array", "aveExpr_array","pValue_array", "FDR_array")
common <- common[!is.na(common$probeID),]
rownames(common) <- 1:nrow(common)
DE_seq <- common[common$FDR_seq<0.05,]
validationFDR <- p.adjust(DE_seq$pValue_array,method="BH")
DE_seq <- cbind(DE_seq,validationFDR)
DE_seq_validated <- DE_seq[DE_seq$validationFDR<0.05 & DE_seq$logFC_seq*DE_seq$logFC_array>0, ]
nrow(DE_seq_validated);nrow(DE_seq);nrow(DE_seq_validated)/nrow(DE_seq)
## Regional Differences ##########
regions <- c("F","F","T","T","F","T","F","T","F","T","F","T")
## before RUV
fit_region <- eBayes(lmFit(useExp, model.matrix(~group_array+regions)))
FDR_region <- topTable(fit_region, coef=3, number=Inf)
FDR_region <- cbind(infoExp[rownames(FDR_region),], FDR_region[,c(1,2,4,5)])
## after RUV
design_region <- model.matrix(~W+group_array+regions)
fit_region <- eBayes(lmFit(useExp, design_region))
FDR_region <- topTable(fit_region, coef=5, number=Inf)
FDR_region <- cbind(infoExp[rownames(FDR_region),], FDR_region[,c(1,2,4,5)])
rownames(FDR_region) <- 1:nrow(FDR_region)
## Regional Differences - Rett Only ##########
regions <- c("F","T","F","T","F","T")
## before RUV
fit_region_bRUV <- eBayes(lmFit(useExp[,7:12], model.matrix(~regions)))
FDR_region_bRUV <- topTable(fit_region_bRUV, coef=2, number=Inf)
FDR_region_bRUV <- cbind(infoExp[rownames(FDR_region_bRUV),], FDR_region_bRUV[,c(1,2,4,5)])
## after RUV
design_region <- model.matrix(~W[7:12,]+regions)
fit_region <- eBayes(lmFit(useExp[,7:12], design_region))
FDR_region <- topTable(fit_region, coef=4, number=Inf)
FDR_region <- cbind(infoExp[rownames(FDR_region),], FDR_region[,c(1,2,4,5)])
rownames(FDR_region) <- 1:nrow(FDR_region)
## Regional Differences - Control Only ##########
regions <- c("F","F","T","T","F","T")
## before RUV
fit_region_bRUV <- eBayes(lmFit(useExp[,1:6], model.matrix(~regions)))
FDR_region_bRUV <- topTable(fit_region_bRUV, coef=2, number=Inf)
FDR_region_bRUV <- cbind(infoExp[rownames(FDR_region_bRUV),], FDR_region_bRUV[,c(1,2,4,5)])
## after RUV
design_region <- model.matrix(~W[1:6,]+regions)
fit_region <- eBayes(lmFit(useExp[,1:6], design_region))
FDR_region <- topTable(fit_region, coef=4, number=Inf)
FDR_region <- cbind(infoExp[rownames(FDR_region),], FDR_region[,c(1,2,4,5)])
rownames(FDR_region) <- 1:nrow(FDR_region)
## Region vs Rett/Control ##############
Region_P <- FDR_region$GeneName[FDR_region$P.Value<0.05]
Region_FDR <- FDR_region$GeneName[FDR_region$adj.P.Val<0.05]
Sig_array <- FDR_array$GeneName[FDR_array$adj.P.Val<0.05]
Sig_seq <- FDR_seq$geneNames[FDR_seq$FDR<0.05]
nrow(FDR_seq) #19470
nrow(FDR_array) #23569
length(Region_P) #1481
length(Region_FDR) #60
length(Sig_array) #318
length(Sig_seq) #244
length(intersect(Region_P,Sig_array)) #38
length(intersect(Region_P,Sig_seq)) #20
length(intersect(Region_FDR,Sig_array)) #0
length(intersect(Region_FDR,Sig_seq))#0
useExpF <- useExp[,c(1,2,5,7,9,11)]
groupF <- c(rep("control", 3), rep("Rett", 3))
fit <- eBayes(lmFit(useExpF, model.matrix(~groupF)))
fp_array <- topTable(fit, coef=2, number=Inf)
fp_array <- cbind(infoExp[rownames(fp_array),], fp_array[,c(1,2,4,5)])
ctlF <- !infoExp$GeneName%in%fp_array$GeneName[1:5000]
RUVnArray <- RUV2(Y=t(useExpF), X=t(t(c(rep(0,3), rep(1,3)))), ctl=ctlF, k=2)
WF <- RUVnArray$W
RF <- removeBatchEffect(useExpF,covariates=WF,design=model.matrix(~groupF))
plotPCA(as.matrix(RF),isLog=TRUE)
RF<-cbind(infoExp,RF)
design_array <- model.matrix(~WF+groupF)
fit <- eBayes(lmFit(useExpF, design_array))
FDR_F <- topTable(fit, coef=4, number=Inf)
FDR_F <- cbind(infoExp[rownames(FDR_F),], FDR_F[,c(1,2,4,5)])
rownames(FDR_F) <- 1:nrow(FDR_F)
head(FDR_F)
nrow(FDR_F[FDR_F$adj.P.Val<0.05,])
## Differential expression analysis - Temporal ##########################
useExpT <- useExp[,c(3,4,6,8,10,12)]
fit <- eBayes(lmFit(useExpT, model.matrix(~groupF)))
fp_array <- topTable(fit, coef=2, number=Inf)
fp_array <- cbind(infoExp[rownames(fp_array),], fp_array[,c(1,2,4,5)])
ctlT <- !infoExp$GeneName%in%fp_array$GeneName[1:5000]
RUVnArray <- RUV2(Y=t(useExpT), X=t(t(c(rep(0,3), rep(1,3)))), ctl=ctlT, k=2)
WT <- RUVnArray$W
RT <- removeBatchEffect(useExpT,covariates=WT,design=model.matrix(~groupF))
plotPCA(as.matrix(RT),isLog=TRUE)
RT<-cbind(infoExp,RT)
design_array <- model.matrix(~WT+groupF)
fit <- eBayes(lmFit(useExpT, design_array))
FDR_T <- topTable(fit, coef=4, number=Inf)
FDR_T <- cbind(infoExp[rownames(FDR_T),], FDR_T[,c(1,2,4,5)])
rownames(FDR_T) <- 1:nrow(FDR_T)
nrow(FDR_T[FDR_T$adj.P.Val<0.05,])
FDR_T[FDR_T$adj.P.Val<0.05,]
FDR_F[FDR_F$adj.P.Val<0.05,]
