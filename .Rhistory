lines(compare[1,],type="b",col="RED")
lines(compare[2,],type="b",col="blue")
legend(x=c("from micro-array","from RNA-seq"),col=c("red","blue"))
legend(topright,c("from micro-array","from RNA-seq"),col=c("red","blue"))
help(legend)
legend(x="topright",legend=c("from micro-array","from RNA-seq"),col=c("red","blue"))
plot(c(rep(max(compare)+0.05,4),rep(min(compare)-0.05,4)),col="white",ylab="Neurol Proportion",xlab=samples)
lines(compare[1,],type="b",col="RED")
lines(compare[2,],type="b",col="blue")
legend(x="centerright",legend=c("from micro-array","from RNA-seq"),col=c("red","blue"),pch=1)
plot(c(rep(max(compare)+0.05,4),rep(min(compare)-0.05,4)),col="white",ylab="Neurol Proportion",xlab=samples)
lines(compare[1,],type="b",col="RED")
lines(compare[2,],type="b",col="blue")
legend(x="right",legend=c("from micro-array","from RNA-seq"),col=c("red","blue"),pch=1)
plot(c(rep(max(compare)+0.05,4),rep(min(compare)-0.05,4)),col="white",ylab="Neurol Proportion",xlab=samples)
lines(compare[1,],type="b",col="RED")
lines(compare[2,],type="b",col="blue")
legend(x="right",legend=c("from micro-array (CellMix)","from RNA-seq (DeconRNASeq)"),col=c("red","blue"),pch=1)
libary("DeconRNASeq")
signatures <- read.csv("/Volumes/Data0/PROJECTS/BrainExpressedEnhancers/BEEmanuscript/manuscriptSubmissionNN/NN-RS50941A_Revised/FINAL_REVISION/TESTcode/RESULTS/rBEE/hg19.cage_peak_tpm_ann.osc_pcells_brainExpressed_0.5TPMx2_aggregatedGene.csv")
SampleInfo <- read.csv("/Volumes/Data0/PROJECTS/BrainExpressedEnhancers/DATA/Fantom5SamplesAnnotated.csv")
n<- grep("Neurons",SampleInfo$Sample)
a<- grep("Astr",SampleInfo$Sample)
nL <- SampleInfo$Library[n[1]]
nS <- signatures[,colnames(signatures)==nL]
aL <- SampleInfo$Library[a[4]]
aS <- signatures[,colnames(signatures)==aL]
sig <- cbind(nS,aS)
rownames(sig) <- signatures$X
load("/Volumes/Data0/PROJECTS/RettSyndromeTranscriptome/MANUSCRIPT/Scripts/Results/FDR_seq_cpm.rda")
x <- aggregate(FDR_seq_cpm[8:13],by=list(FDR_seq_cpm$geneNames),FUN = "mean")
rownames(x) <- x[,1]
x<-x[,-1]
common <- intersect(rownames(x),rownames(sig))
x<-x[rownames(x)%in%common,]
sig <- data.frame(sig[match(rownames(x),rownames(sig)),])
output <- DeconRNASeq(datasets=x, signatures=sig)
np <- output$out.all[,1]
load("/Volumes/Data1/Deconvolution/CellMix/Astro_seq.rda")
compare <- rbind(1-Astro_seq,np)
plot(c(rep(max(compare)+0.05,4),rep(min(compare)-0.05,4)),col="white",ylab="Neurol Proportion",xlab=samples)
lines(compare[1,],type="b",col="RED")
lines(compare[2,],type="b",col="blue")
legend(x="right",legend=c("from micro-array (CellMix)","from RNA-seq (DeconRNASeq)"),col=c("red","blue"),pch=1)
nL <- SampleInfo$Library[n[1:3]]
nL
nS <- signatures[,colnames(signatures)==nL]
head(nS)
nL <- SampleInfo$Library[n[1:3]]
nS <- signatures[,colnames(signatures)==nL]
aL <- SampleInfo$Library[a[4:6]]
aS <- signatures[,colnames(signatures)==aL]
sig <- cbind(rowMeans(nS),rowMeans(aS))
head(sig)
aL <- SampleInfo$Library[a[4:6]]
head(al)
head(aL)
aS <- signatures[,colnames(signatures)==aL]
head(aS)
hea(aL)
head(aL)
aL
aS <- signatures[,colnames(signatures)==aL]
aS
aL <- SampleInfo$Library[a[4]]
aS <- signatures[,colnames(signatures)==aL]
aS
head(aS)
aL <- SampleInfo$Library[a[4:5]]
aS <- signatures[,colnames(signatures)==aL]
nL <- SampleInfo$Library[n[1:3]]
nS <- signatures[,colnames(signatures)==nL]
aL <- SampleInfo$Library[a[4:5]]
aS <- signatures[,colnames(signatures)==aL]
colnames(signatures)==aL
aL
colnames(signatures)==aL
aL <- SampleInfo$Library[a[5]]
aS <- signatures[,colnames(signatures)==aL]
aS
a
SampleInfo[a,]
aL <- SampleInfo$Library[a[4:6]]
aS <- signatures[,colnames(signatures)==aL]
aS
aL <- SampleInfo$Library[a[4:6]]
aL
nL <- SampleInfo$Library[n[1:3]]
nL
aL <- SampleInfo$Library[a[4:6]]
aS <- signatures[,colnames(signatures)%in%aL]
aS
nL <- SampleInfo$Library[n[1:3]]
nS <- signatures[,colnames(signatures)%in%nL]
aL <- SampleInfo$Library[a[4:6]]
aS <- signatures[,colnames(signatures)%in%aL]
sig <- cbind(rowMeans(nS),rowMeans(aS))
head(sig)
rownames(sig) <- signatures$X
load("/Volumes/Data0/PROJECTS/RettSyndromeTranscriptome/MANUSCRIPT/Scripts/Results/FDR_seq_cpm.rda")
x <- aggregate(FDR_seq_cpm[8:13],by=list(FDR_seq_cpm$geneNames),FUN = "mean")
rownames(x) <- x[,1]
x<-x[,-1]
common <- intersect(rownames(x),rownames(sig))
x<-x[rownames(x)%in%common,]
sig <- data.frame(sig[match(rownames(x),rownames(sig)),])
output <- DeconRNASeq(datasets=x, signatures=sig)
np <- output$out.all[,1]
load("/Volumes/Data1/Deconvolution/CellMix/Astro_seq.rda")
compare <- rbind(1-Astro_seq,np)
plot(c(rep(max(compare)+0.05,4),rep(min(compare)-0.05,4)),col="white",ylab="Neurol Proportion",xlab=samples)
lines(compare[1,],type="b",col="RED")
lines(compare[2,],type="b",col="blue")
legend(x="right",legend=c("from micro-array (CellMix)","from RNA-seq (DeconRNASeq)"),col=c("red","blue"),pch=1)
plot(c(rep(max(compare)+0.05,4),rep(min(compare)-0.05,4)),col="white",ylab="Neurol Proportion",xlab=samples)
lines(compare[1,],type="b",col="RED")
lines(compare[2,],type="b",col="blue")
legend(x="bottomright",legend=c("from micro-array (CellMix)","from RNA-seq (DeconRNASeq)"),col=c("red","blue"),pch=1)
plot(c(rep(max(compare)+0.05,4),rep(min(compare)-0.05,2)),col="white",ylab="Neurol Proportion",xlab=samples)
lines(compare[1,],type="b",col="RED")
lines(compare[2,],type="b",col="blue")
legend(x="bottomright",legend=c("from micro-array (CellMix)","from RNA-seq (DeconRNASeq)"),col=c("red","blue"),pch=1)
plot(c(rep(max(compare)+0.05,4),rep(min(compare)-0.05,2)),col="white",ylab="Neurol Proportion",xlab=samples)
source('/Volumes/Data1/Deconvolution/CellMix/Dcon_rnaseq.R')
source('/Volumes/Data1/Deconvolution/CellMix/Dcon_rnaseq.R')
x<-rnorm(100)
hist(x)
hist(log(x))
hist(x)
log(scale(x)-min(scale(x))+0.001)
y<-log(scale(x)-min(scale(x))+0.001)
plot(y)
hist(y)
plot(y)
plot(y)
z<-log(x-min(x+0.001))
z<-log(x-min(x)+0.001)
plot(z)
plog(z)
plog(y)
pot(y)
plot(y)
ploy(z)
plot(z)
z-y
x<-rnorm(100,0,5)
y<-log(scale(x)-min(scale(x))+0.001)
z<-log(x-min(x)+0.001)
plot(y)
plot(z)
plot(y)
ploy(z)
plot(z)
x<-rnorm(100,100,1)
x
hist(x)
hist(log(x))
hist(log(log(x)))
hist(log(log(log(x))))
hist(log(log(log(log(x)))))
skewness
install.packages("e1071")
library(e1071)
skewness
a<-c(1,2,3)
skewness(a)
a<-c(1,2,3,4)
skewness(a)
a<-c(1,2,3,3.5,4)
skewness(a)
1/1.5
source("mpmik_bw.R")
library("mpmi")
library("FNN")
## TMI calculates the target MI
#### set integration limit ########
w2 <- c(1,1,1)
probs <- w2 / sum(w2)
Y<-rnorm(sum(w),0,1)
w <- rowSums(rmultinom(s, 1, prob=probs))
X<-c(rep("A",w[1]), rep("B",w[2]), rep("C",w[3]))
Y<-rnorm(sum(w),0,1)
p<- 1000
s<- 500
w <- rowSums(rmultinom(s, 1, prob=probs))
X<-c(rep("A",w[1]), rep("B",w[2]), rep("C",w[3]))
Y<-rnorm(sum(w),0,1)
skewness(Y)
Y<-c(rexp(w[1],1),rexp(w[2],0.2),rexp(w[3],0.1))
w <- rowSums(rmultinom(s, 1, prob=probs))
X<-c(rep("A",w[1]), rep("B",w[2]), rep("C",w[3]))
Y<-c(rexp(w[1],1),rexp(w[2],0.2),rexp(w[3],0.1))
skewness(Y)
1/skewness(Y)
source("https://bioconductor.org/biocLite.R")
biocLite("RUVSeq")
source("http://bioconductor.org/biocLite.R")
biocLite("RUVSeq")
help(RUVg)
library(RUVSeq)
help("RUVg")
load("/Volumes/Data0/PROJECTS/RettSyndromeTranscriptome/MANUSCRIPT/Scripts/Annot/repeats_annot.rda")
ls()
summary(repeats_annot)
ls()
head(repeats_annot)
## load required packages ##################
library(limma)
library(ruv)
library(EDASeq)
## micro-array data #######################
load("../Data/useExp.rda")
load("../Data/infoExp.rda")
Samples_Array <-  c("C55F","C1078F","C1078T","C1541T","C1571F","C1571T","R1815F","R1815T","R4516F","R4516T","R4852F","R4852T")
Samples_array <- c("C1-F", "C2-F", "C2-T", "C3-T", "C4-F", "C4-T", "R1-F", "R1-T", "R2-F", "R2-T", "R3-F", "R3-T")
group_array <- c(rep("control", 6), rep("Rett", 6))
regions <-c("F","F","T","T","F","T","F","T","F","T","F","T")
## Array Neuron Levels Plot ###########################
load("../Data/Astro_array.rda")
barplot(height=1-as.numeric(Astro_array[1,-1]),
names.arg=Samples_array,
ylab = "Proportion of neurons",
ylim=c(0.48,0.52), col=c(rep("blue", 6), rep("red", 6)),
xpd=FALSE)
abline(h=0.5, col="grey")
plotPCA(as.matrix(useExp),isLog=TRUE)
## RUV2 normalisation with k=2 ##########################
fit <- eBayes(lmFit(useExp, model.matrix(~group_array)))
fp_array <- topTable(fit, coef=2, number=Inf)
fp_array <- cbind(infoExp[rownames(fp_array),], fp_array[,c(1,2,4,5)])
ctl <- !infoExp$GeneName%in%fp_array$GeneName[1:5000]
RUVnArray <- RUV2(Y=t(useExp), X=t(t(c(rep(0,6), rep(1,6)))), ctl=ctl, k=2)
W <- RUVnArray$W
R <- removeBatchEffect(useExp,covariates=W,design=model.matrix(~group_array))
plotPCA(as.matrix(R),isLog=TRUE)
R<-cbind(infoExp,R)
## save(R, file="../Results/R.rda")
## Regional Differences ##########
regions <- c("F","F","T","T","F","T","F","T","F","T","F","T")
## before RUV
fit_region <- eBayes(lmFit(useExp, model.matrix(~group_array+regions)))
FDR_region <- topTable(fit_region, coef=3, number=Inf)
FDR_region <- cbind(infoExp[rownames(FDR_region),], FDR_region[,c(1,2,4,5)])
## after RUV
design_region <- model.matrix(~W+group_array+regions)
fit_region <- eBayes(lmFit(useExp, design_region))
FDR_region <- topTable(fit_region, coef=5, number=Inf)
FDR_region <- cbind(infoExp[rownames(FDR_region),], FDR_region[,c(1,2,4,5)])
rownames(FDR_region) <- 1:nrow(FDR_region)
## Regional Differences - Rett Only ##########
regions <- c("F","T","F","T","F","T")
## before RUV
fit_region_bRUV <- eBayes(lmFit(useExp[,7:12], model.matrix(~regions)))
FDR_region_bRUV <- topTable(fit_region_bRUV, coef=2, number=Inf)
FDR_region_bRUV <- cbind(infoExp[rownames(FDR_region_bRUV),], FDR_region_bRUV[,c(1,2,4,5)])
## after RUV
design_region <- model.matrix(~W[7:12,]+regions)
fit_region <- eBayes(lmFit(useExp[,7:12], design_region))
FDR_region <- topTable(fit_region, coef=4, number=Inf)
FDR_region <- cbind(infoExp[rownames(FDR_region),], FDR_region[,c(1,2,4,5)])
rownames(FDR_region) <- 1:nrow(FDR_region)
## Regional Differences - Control Only ##########
regions <- c("F","F","T","T","F","T")
## before RUV
fit_region_bRUV <- eBayes(lmFit(useExp[,1:6], model.matrix(~regions)))
FDR_region_bRUV <- topTable(fit_region_bRUV, coef=2, number=Inf)
FDR_region_bRUV <- cbind(infoExp[rownames(FDR_region_bRUV),], FDR_region_bRUV[,c(1,2,4,5)])
## after RUV
design_region <- model.matrix(~W[1:6,]+regions)
fit_region <- eBayes(lmFit(useExp[,1:6], design_region))
FDR_region <- topTable(fit_region, coef=4, number=Inf)
FDR_region <- cbind(infoExp[rownames(FDR_region),], FDR_region[,c(1,2,4,5)])
rownames(FDR_region) <- 1:nrow(FDR_region)
## Differential expression analysis #################
design_array <- model.matrix(~W+group_array)
fit <- eBayes(lmFit(useExp, design_array))
FDR_array <- topTable(fit, coef=4, number=Inf)
FDR_array <- cbind(infoExp[rownames(FDR_array),], FDR_array[,c(1,2,4,5)])
rownames(FDR_array) <- 1:nrow(FDR_array)
## save(FDR_array, file="../Results/FDR_array.rda")
## Load required packages ##########################################
library(edgeR)
library(RUVSeq)
library(EDASeq)
## Load inputs/data #############################################
load("../Results/geneCounts.rda")
load("../Data/Astro_seq.rda")
load("../Annot/geneInfo.rda")
## Two versions of sample naming ###################################
Samples_Seq <- c("C1078", "C1541", "C1571", "R1815", "R4516", "R4852")
Samples_seq <- c("C2", "C3", "C4", "R1", "R2", "R3")
## Normalisation and Filtering ###########################################
geneRPKM <- rpkm(x = geneCounts$counts, gene.length = geneCounts$annotation$Length)
geneCPM <- cpm(geneCounts$counts)
threshold = 0.5; nSamples = 3
filtered <- which(rowSums(geneRPKM > threshold) >= nSamples)
counts <- geneCounts$counts[filtered,]
RPKM <- geneRPKM[filtered,]
CPM <- geneCPM[filtered,]
colnames(counts) <- Samples_seq
colnames(RPKM) <- Samples_seq
colnames(CPM) <- Samples_seq
## Neuron Levels Plot #######################################################
barplot(height=1-as.numeric(Astro_seq),
names.arg=Samples_seq,
ylab = "Proportion of Neurons",
ylim=c(0.48,0.52), col=c(rep("red", 3), rep("blue", 3)),
xpd=FALSE)
abline(h=0.5, col="grey")
## PC plots ###################################################################
group_seq <- c("control", "control", "control", "Rett", "Rett", "Rett")
input <- DGEList(counts=counts, group=group_seq)
input <- calcNormFactors(input)
plotMDS(input, col=c(rep("blue",3),rep("red",3)),
xlab="PC1", ylab="PC2", main="TMM Normalisation")
plotPCA(counts)
## first past differential expression analysis ####################################
input <- estimateCommonDisp(input, verbose=TRUE)
input <- estimateTagwiseDisp(input)
plotBCV(input)
et <- exactTest(input)
firstPass <- topTags(et,n=Inf)
controlGenes <- rownames(firstPass)[-c(1:5000)]
## RUV ##########################################################################
RUV1 <- RUVg(counts, controlGenes, k=1)
N <- RUV1$normalizedCounts
plotMDS(DGEList(RUV1$normalizedCounts), col=c(rep("blue",3),rep("red",3)),
xlab="PC1", ylab="PC2", main="RUVg (k=1)")
RUV2 <- RUVg(counts, controlGenes, k=2)
plotMDS(DGEList(RUV2$normalizedCounts), col=c(rep("blue",3),rep("red",3)),
xlab="PC1", ylab="PC2", main="RUVg (k=2)")
plotPCA(N)
## save(N, file="../Results/N.rda")
## Regions
## Differential expression analysis #############################################
design <- model.matrix(~RUV1$W+group_seq)
input <- DGEList(counts=counts, group=group_seq)
input <- calcNormFactors(input, method="none")
input <- estimateGLMCommonDisp(input, design, verbose=TRUE)
input <- estimateGLMTrendedDisp(input, design)
input <- estimateGLMTagwiseDisp(input, design)
plotBCV(input)
fit <- glmFit(input, design)
et <- glmLRT(fit)
FDR_seq <- data.frame(topTags(et, n=Inf))
FDR_seq <- cbind(rownames(FDR_seq), FDR_seq)
colnames(FDR_seq)[1] <- "genes"
rownames(FDR_seq) <- 1:nrow(FDR_seq)
## Regional Analysis #############################
regions <- c("P","T",rep("P",4))
## before RUV
design_regions <- model.matrix(~group_seq+regions)
input <- DGEList(counts=counts)
input <- calcNormFactors(input, method="none")
input <- estimateGLMCommonDisp(input, design_regions, verbose=TRUE)
input <- estimateGLMTrendedDisp(input, design_regions)
input <- estimateGLMTagwiseDisp(input, design_regions)
plotBCV(input)
fit <- glmFit(input, design_regions)
et<-glmLRT(fit,coef=2)
FDR_regions <- data.frame(topTags(et, n=Inf))
FDR_regions <- cbind(rownames(FDR_regions), FDR_regions)
colnames(FDR_regions)[1] <- "genes"
rownames(FDR_regions) <- 1:nrow(FDR_regions)
## 54 regions vs 89 rett/control
## after RUV
design_regions <- model.matrix(~RUV1$W+group_seq+regions)
input <- DGEList(counts=counts)
input <- calcNormFactors(input, method="none")
input <- estimateGLMCommonDisp(input, design_regions, verbose=TRUE)
input <- estimateGLMTrendedDisp(input, design_regions)
input <- estimateGLMTagwiseDisp(input, design_regions)
plotBCV(input)
fit <- glmFit(input, design_regions)
#et <- glmLRT(fit,coef=4)
et <- glmLRT(fit,coef=3)
FDR_regions <- data.frame(topTags(et, n=Inf))
FDR_regions <- cbind(rownames(FDR_regions), FDR_regions)
colnames(FDR_regions)[1] <- "genes"
rownames(FDR_regions) <- 1:nrow(FDR_regions)
## 18 regions vs 223 R-C
setwd("/Volumes/Data0/PROJECTS/RettSyndromeTranscriptome/GitHub/RettProject")
setwd("/Volumes/Data0/PROJECTS/RettSyndromeTranscriptome/GitHub/RettProject")
library(EDASeq)
library(edgeR)
library(CellMix)
## Part I: Markers - Cahoy ##############################################
cahoy_ast=read.csv("../Data/Cahoy_S4_ast.csv", header = T)
cahoy_neu=read.csv("../Data/Cahoy_S6_neu.csv", header = T)
asts <- toupper(cahoy_ast$Gene.Name)
neus <- toupper(cahoy_neu$Gene.Name)
common <- intersect(asts,neus)
asts <- unique(setdiff(asts,common))
neus <- unique(setdiff(neus,common))
txtdesc <- function(x) textConnection(paste(x, collapse="\n"))
ML_cahoy=MarkerList(file=txtdesc(c(paste(asts,"Astrocytes"),paste(neus,"Neurons"))))
dataExp <- read.csv("../Data/dataExpProbes.csv")
dataExp <- aggregate(dataExp[,-c(1,2)],by=list(dataExp$TargetID),FUN=mean)
rownames(dataExp)<-dataExp$Group.1
dataExp<-as.matrix(dataExp[,-1])
plotMDS(dataExp)
dec_cahoy=ged(dataExp,ML_cahoy,"ssKL")
dec_array_bRUV <- dec_cahoy@fit@H
barplot(height=as.numeric(dec_array_bRUV[2,]),
names.arg=colnames(dec_array_bRUV),
ylab = "Neuron Percentage",
ylim=c(0.46,0.51), col=c(rep("blue", 6), rep("red", 6)),
xpd=FALSE)
dataexp <- read.csv("/Users/rna/Google Drive/DATA/AMELIA ASSAREH/DECONVOLUTION/Data/dataExpProbes_noLog.csv", head = T)
dataexp <- aggregate(dataexp[,-c(1,2)],by=list(dataexp$TargetID),FUN=mean)
rownames(dataexp)<-dataexp$Group.1
dataexp<-as.matrix(dataexp[,-1])
dec_cahoy=ged(dataexp,ML_cahoy,"ssKL")
dec_array_bRUV <- dec_cahoy@fit@H
barplot(height=as.numeric(dec_array_bRUV[2,]),
names.arg=colnames(dec_array_bRUV),
ylab = "Neuron Percentage",
ylim=c(0.40,0.60), col=c(rep("blue", 6), rep("red", 6)),
xpd=FALSE)
## Part III: Micro-array after RUV ########################################
load("../Results/R1.rda")
dataExp <- aggregate(R1[,-c(1,2)],by=list(R1$TargetID),FUN=mean)
rownames(dataExp)<-dataExp$Group.1
dataExp<-as.matrix(dataExp[,-1])
plotMDS(dataExp)
dec_cahoy=ged(2^dataExp,ML_cahoy,"ssKL")
dec_array_aRUV <- dec_cahoy@fit@H
barplot(dec_array_aRUV[2,], col=c(rep("blue",6),rep("red",6)),ylim=c(0.59, 0.66),xpd=FALSE)
setwd("/Volumes/Data0/PROJECTS/RettSyndromeTranscriptome/GitHub/RettProject")
library(EDASeq)
library(edgeR)
library(CellMix)
## Part I: Markers - Cahoy ##############################################
cahoy_ast=read.csv("../Data/Cahoy_S4_ast.csv", header = T)
cahoy_neu=read.csv("../Data/Cahoy_S6_neu.csv", header = T)
asts <- toupper(cahoy_ast$Gene.Name)
neus <- toupper(cahoy_neu$Gene.Name)
common <- intersect(asts,neus)
asts <- unique(setdiff(asts,common))
neus <- unique(setdiff(neus,common))
txtdesc <- function(x) textConnection(paste(x, collapse="\n"))
ML_cahoy=MarkerList(file=txtdesc(c(paste(asts,"Astrocytes"),paste(neus,"Neurons"))))
## Part II: Micro-array before RUV ########################################
pdf("Plots_DeconvArray.pdf")
dataExp <- read.csv("../Data/dataExpProbes.csv")
dataExp <- aggregate(dataExp[,-c(1,2)],by=list(dataExp$TargetID),FUN=mean)
rownames(dataExp)<-dataExp$Group.1
dataExp<-as.matrix(dataExp[,-1])
plotMDS(dataExp,  main="MDS before RUV,log2 transformed data")
dec_cahoy=ged(dataExp,ML_cahoy,"ssKL")
dec_array_bRUV <- dec_cahoy@fit@H
barplot(height=as.numeric(dec_array_bRUV[2,]),
names.arg=colnames(dec_array_bRUV),
ylab = "Neuron Percentage",
ylim=c(0.46,0.51), col=c(rep("blue", 6), rep("red", 6)),
xpd=FALSE,  main="Deconv before RUV,log2 transformed data")
dataexp <- read.csv("/Users/rna/Google Drive/DATA/AMELIA ASSAREH/DECONVOLUTION/Data/dataExpProbes_noLog.csv", head = T)
dataexp <- aggregate(dataexp[,-c(1,2)],by=list(dataexp$TargetID),FUN=mean)
rownames(dataexp)<-dataexp$Group.1
dataexp<-as.matrix(dataexp[,-1])
dec_cahoy=ged(dataexp,ML_cahoy,"ssKL")
dec_array_bRUV <- dec_cahoy@fit@H
barplot(height=as.numeric(dec_array_bRUV[2,]),
names.arg=colnames(dec_array_bRUV),
ylab = "Neuron Percentage",
ylim=c(0.40,0.60), col=c(rep("blue", 6), rep("red", 6)),
xpd=FALSE,  main="Deconv before RUV, NON-log2 transformed data")
## Part III: Micro-array after RUV ########################################
load("../Results/R1.rda")
dataExp <- aggregate(R1[,-c(1,2)],by=list(R1$TargetID),FUN=mean)
rownames(dataExp)<-dataExp$Group.1
dataExp<-as.matrix(dataExp[,-1])
plotMDS(dataExp, main="MDS after RUV,log2 transformed data")
dec_cahoy=ged(2^dataExp,ML_cahoy,"ssKL")
dec_array_aRUV <- dec_cahoy@fit@H
barplot(dec_array_aRUV[2,], col=c(rep("blue",6),rep("red",6)),ylim=c(0.59, 0.66),xpd=FALSE, "Deconv after RUV,NON-log2 transformed data")
## Boxplots
par(mfrow=c(2,1))
boxplot(dec_array_bRUV[2,1:6], dec_array_bRUV[2,7:12], col=c("blue", "red"), ylab="Estimated Proportion of Neurons", main="Before RUV", names=c("Controls", "Rett"))
boxplot(dec_array_aRUV[2,1:6], dec_array_aRUV[2,7:12], col=c("blue", "red"), ylab="Estimated Proportion of Neurons", main="After RUV", names=c("Controls", "Rett"))
dev.off()
help(pdf)
source('/Volumes/Data0/PROJECTS/RettSyndromeTranscriptome/GitHub/RettProject/Deconvolution.R')
dataExp <- read.csv("../Data/dataExpProbes.csv")
head(dataExp)
dataexp <- read.csv("/Users/rna/Google Drive/DATA/AMELIA ASSAREH/DECONVOLUTION/Data/dataExpProbes_noLog.csv", head = T)
head(dataexp)
source('/Volumes/Data0/PROJECTS/RettSyndromeTranscriptome/GitHub/RettProject/Deconvolution.R')
source('/Volumes/Data0/PROJECTS/RettSyndromeTranscriptome/GitHub/RettProject/Deconvolution.R')
help(pdf)
source('/Volumes/Data0/PROJECTS/RettSyndromeTranscriptome/GitHub/RettProject/Deconvolution.R')
## load required packages ##################
library(limma)
library(ruv)
library(EDASeq)
## micro-array data #######################
load("../Data/useExp.rda")
load("../Data/infoExp.rda")
Samples_Array <-  c("C55F","C1078F","C1078T","C1541T","C1571F","C1571T","R1815F","R1815T","R4516F","R4516T","R4852F","R4852T")
Samples_array <- c("C1-F", "C2-F", "C2-T", "C3-T", "C4-F", "C4-T", "R1-F", "R1-T", "R2-F", "R2-T", "R3-F", "R3-T")
group_array <- c(rep("control", 6), rep("Rett", 6))
regions <-c("F","F","T","T","F","T","F","T","F","T","F","T")
## Array Neuron Levels Plot ###########################
load("../Data/Astro_array.rda")
barplot(height=1-as.numeric(Astro_array[1,-1]),
names.arg=Samples_array,
ylab = "Proportion of neurons",
ylim=c(0.48,0.52), col=c(rep("blue", 6), rep("red", 6)),
xpd=FALSE)
abline(h=0.5, col="grey")
plotPCA(as.matrix(useExp),isLog=TRUE)
plotMDS(useExp)
